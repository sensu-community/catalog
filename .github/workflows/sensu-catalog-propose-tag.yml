---
name: 'Sensu Catalog Propose Tag'

on:
  pull_request:
    types: [closed]

jobs:
  propose-tag:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Fetch Tags
        run: git fetch --tags
      - name: Log if fires unexpectedly   
        shell: bash 
        if: github.event.pull_request.merged != true
        run: |
          echo "Propose tag action fired when pr not merged"
      - name: Propose tag after PR merge    
        shell: bash 
        if: github.event.pull_request.merged == true
        run: |
          commit=${commit:=${GITHUB_SHA}}
          echo "repo: ${GITHUB_REPOSITORY}"
          echo "sha: ${GITHUB_SHA}"
          echo "commit: ${commit}"
          if [  -z ${commit} ]; then
            echo -e "commit empty, taking no additional action" >&2
            exit 0
          fi
          commit_epoch=$(git show -s --format=%ct ${commit})
          d=`date --utc -d @$commit_epoch +%Y%m%d`

          ## Parse the PR Merge commit mesg for shasums to use in diff to discover what has changed
          echo "Running: git show \${commit} | grep \"Merge:\""
          merge_line=$(git show ${commit} | grep "Merge:")
          echo "Merge Line: ${merge_line}"
          if [ -z "$merge_line" ]
          then
            echo "Problem reading 'Merge:' msg from git show ${commit}"
            exit 1
          fi
          echo "Running: echo \${merge_line}|  awk '{print \$2}')"
          sha1=$(echo ${merge_line} |  awk '{print $2}')
          echo "SHA1: ${sha1}"
          echo "Running: echo \${merge_line}|  awk '{print \$3}')"
          sha2=$(echo ${merge_line} |  awk '{print $3}')
          echo "SHA2: ${sha2}"
          if [ -z "$sha1" ]
          then
            echo "Problem reading sha1 from 'Merge:' msg from git show ${commit}"
            exit 1
          fi
          if [ -z "$sha2" ]
          then
            echo "Problem reading sha1 from 'Merge:' msg from git show ${commit}"
            exit 1
          fi

          ## Use git diff --name-only  with the shawsums provided in the merge message
          ## to get the list of files changed as part of the PR merge
          echo "Running: git diff --name-only ${sha1} ${sah2} | { grep \"integrations/\"  || test \$? = 1; }"
          results=`git diff --name-only ${sha1} ${sah2} | { grep "integrations/"  || test $? = 1; }`
          if [ ${#results} -eq 0 ]; then
            echo "No integration files changed in commit ${commit}, taking no additional action" 
            exit 0
          fi
          echo "Compiling list of changed integrations"
          ## Only consider files changed under integrations/ directory
          integrations=$(echo "${results}" | xargs -n 1 dirname  | sed -e 's/^integrations\///' |sort -u)
          echo -e "Detected Changed Integrations:\n$integrations\n"
          ## Build suggested tag to use for each integration
          #  base_version is date of merge commit in yyyymmdd format 
          #  Increment semver minor if proposed tag already exists 
          for integration in $integrations
          do
            trimmed=$(echo ${integration} | sed 's:/*$::')
            base_version=${trimmed}/${d}
            major=0
            minor=0
            invalid=1
            while [ "$minor" -le 10 -a "$invalid" -eq 1 ]
            do
              version=$base_version.$major.$minor
              if [ $(git tag -l "$version") ]; then
                invalid=1
              else
                invalid=0
              fi
              ((minor=i+1))
            done
            echo "Suggested Version: $version"
            ## Create a new issue with proposed integration tag
            if [  -z ${GITHUB_TOKEN} ]; then
              echo -e "GITHUB_TOKEN empty, skipping issue creation" >&2
            else
              curl \
                -X POST \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${GITHUB_REPOSITORY}/issues \
                -d "{\"title\":\"Proposed Release Tag ${version}\",\"body\":\"Automatic tag proposal based on files changed in PR merge.\n  Commit: ${commit}\n  REF: ${GITHUB_REF}\n  Integration: ${trimmed}\",\"labels\":[\"need-tag\"]}"
            fi
          done

