// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/sensu/sensu-go/api/core/v2 --exclude=HealthResponse,Claims,Version

package v2

// Rule holds information that describes an action that can be taken
#Rule: {
	// Verbs is a list of verbs that apply to all of the listed resources for
	// this rule. These include "get", "list", "watch", "create", "update",
	// "delete".
	// TODO: add support for "patch" (this is expensive and should be delayed
	// until a further release). TODO: add support for "watch" (via websockets)
	verbs: [...string] @go(Verbs,[]string) @protobuf(1,bytes,rep,proto3)

	// Resources is a list of resources that this rule applies to. "*"
	// represents all resources.
	resources: [...string] @go(Resources,[]string) @protobuf(2,bytes,rep,proto3)

	// ResourceNames is an optional list of resource names that the rule applies
	// to.
	resource_names: [...string] @go(ResourceNames,[]string) @protobuf(3,bytes,rep,json=resourceNames,proto3)
}

// ClusterRole applies to all namespaces within a cluster.
#ClusterRole: {
	rules: [...#Rule] @go(Rules,[]Rule) @protobuf(1,bytes,rep,proto3)

	// Metadata contains name, namespace, labels and annotations
	metadata?: #ObjectMeta @go(ObjectMeta) @protobuf(3,bytes,opt,proto3,embedded=metadata)
}

// Role applies only to a single namespace.
#Role: {
	rules: [...#Rule] @go(Rules,[]Rule) @protobuf(1,bytes,rep,proto3)

	// Metadata contains name, namespace, labels and annotations
	metadata?: #ObjectMeta @go(ObjectMeta) @protobuf(4,bytes,opt,proto3,embedded=metadata)
}

// RoleRef maps groups to Roles or ClusterRoles.
#RoleRef: {
	// Type of role being referenced.
	type: string @go(Type) @protobuf(1,bytes,opt,proto3)

	// Name of the resource being referenced
	name: string @go(Name) @protobuf(2,bytes,opt,proto3)
}

#Subject: {
	// Type of object referenced (user or group)
	type: string @go(Type) @protobuf(1,bytes,opt,proto3)

	// Name of the referenced object
	name: string @go(Name) @protobuf(2,bytes,opt,proto3)
}

// ClusterRoleBinding grants the permissions defined in a ClusterRole referenced
// to a user or a set of users
#ClusterRoleBinding: {
	// Subjects holds references to the objects the ClusterRole applies to
	subjects: [...#Subject] @go(Subjects,[]Subject) @protobuf(1,bytes,rep,proto3)

	// RoleRef references a ClusterRole in the current namespace
	role_ref: #RoleRef @go(RoleRef) @protobuf(2,bytes,opt,json=roleRef,proto3)

	// Metadata contains name, namespace, labels and annotations
	metadata?: #ObjectMeta @go(ObjectMeta) @protobuf(4,bytes,opt,proto3,embedded=metadata)
}

// RoleBinding grants the permissions defined in a Role referenced to a user or
// a set of users
#RoleBinding: {
	// Subjects holds references to the objects the Role applies to
	subjects: [...#Subject] @go(Subjects,[]Subject) @protobuf(1,bytes,rep,proto3)

	// RoleRef references a Role in the current namespace
	role_ref: #RoleRef @go(RoleRef) @protobuf(2,bytes,opt,json=roleRef,proto3)

	// Metadata contains name, namespace, labels and annotations
	metadata?: #ObjectMeta @go(ObjectMeta) @protobuf(5,bytes,opt,proto3,embedded=metadata)
}

#ClusterRoleFace: _

#RoleFace: _

#ClusterRoleBindingFace: _

#RoleBindingFace: _

_#randyRbac: _
