// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/sensu/sensu-go/api/core/v2 --exclude=HealthResponse,Claims,Version

package v2

// A CheckRequest represents a request to execute a check
#CheckRequest: {
	// Config is the specification of a check.
	config?: null | #CheckConfig @go(Config,*CheckConfig) @protobuf(1,bytes,opt,proto3)

	// Assets are a list of assets required to execute check.
	assets: [...#Asset] @go(Assets,[]Asset) @protobuf(2,bytes,rep,proto3)

	// Hooks are a list of hooks to be executed after a check.
	hooks: [...#HookConfig] @go(Hooks,[]HookConfig) @protobuf(3,bytes,rep,proto3)

	// Issued describes the time in which the check request was issued
	issued: int64 @go(Issued) @protobuf(4,varint,opt,name=Issued,proto3)

	// HookAssets is a map of assets required to execute hooks.
	hook_assets: {[string]: null | #AssetList} @go(HookAssets,map[string]*AssetList) @protobuf(5,map[bytes]bytes,rep,json=hookAssets,proto3)

	// Secrets is a list of kv to be added to the env vars of a check.
	secrets?: [...string] @go(Secrets,[]string) @protobuf(6,bytes,rep,proto3)
}

// An AssetList represents a list of assets for a CheckRequest.
#AssetList: {
	// Assets are a list of assets required to execute check or hook.
	assets: [...#Asset] @go(Assets,[]Asset) @protobuf(1,bytes,rep,proto3)
}

// A ProxyRequests represents a request to execute a proxy check
#ProxyRequests: {
	// EntityAttributes store serialized arbitrary JSON-encoded data to match
	// entities in the registry.
	entity_attributes: [...string] @go(EntityAttributes,[]string) @protobuf(1,bytes,rep,json=entityAttributes,proto3)

	// Splay indicates if proxy check requests should be splayed, published
	// evenly over a window of time.
	splay: bool @go(Splay) @protobuf(2,varint,opt,proto3)

	// SplayCoverage is the percentage used for proxy check request splay
	// calculation.
	splay_coverage: uint32 @go(SplayCoverage) @protobuf(3,varint,opt,json=splayCoverage,proto3)
}

// CheckConfig is the specification of a check.
#CheckConfig: _

// A Check is a check specification and optionally the results of the check's
// execution.
#Check: _

// CheckHistory is a record of a check execution and its status
#CheckHistory: {
	// Status is the exit status code produced by the check.
	status: uint32 @go(Status) @protobuf(1,varint,opt,proto3)

	// Executed describes the time in which the check request was executed
	executed: int64 @go(Executed) @protobuf(2,varint,opt,proto3)
}

#CheckConfigFace: _

#CheckFace: _

_#randyCheck: _
